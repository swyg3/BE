services:
  nest_app:
    container_name: nest_app_dev
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    env_file:
      - .env.dev
    environment:
      - NODE_ENV=${NODE_ENV}
      - NODE_PORT=${NODE_PORT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - DYNAMODB_ENDPOINT=${DYNAMODB_ENDPOINT}
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    ports:
      - "${NODE_PORT}:${NODE_PORT}"
    command: npm run start:dev
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
      - dynamodb-local
    # healthcheck:
    #   test: [ "CMD", "curl", "-f", "http://localhost:${NODE_PORT}/health" ]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "0.5"
    #       memory: 1G

  redis:
    image: redis:latest
    container_name: redis_dev
    env_file:
      - .env.dev
    environment:
      - REDIS_PORT=${REDIS_PORT}
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    command: redis-server --maxmemory 200mb --maxmemory-policy allkeys-lru
    # healthcheck:
    #   test: [ "CMD", "redis-cli", "ping" ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "0.2"
    #       memory: 250M

  postgres:
    image: postgres:13
    container_name: postgres_dev
    env_file:
      - .env.dev
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    # healthcheck:
    #   test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME}" ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "0.3"
    #       memory: 300M

  dynamodb-local:
    image: amazon/dynamodb-local:latest
    container_name: dynamodb-local
    env_file:
      - .env.dev
    ports:
      - "${DYNAMODB_PORT}:${DYNAMODB_PORT}"
    command: "-jar DynamoDBLocal.jar -sharedDb -port ${DYNAMODB_PORT}"
    volumes:
      - dynamodb_data:/home/dynamodblocal
    # healthcheck:
    #   test: [ "CMD-SHELL", "curl -f http://localhost:${DYNAMODB_PORT} || exit 1" ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "0.2"
    #       memory: 300M

  dynamodb-admin:
    image: aaronshaf/dynamodb-admin
    env_file:
      - .env.dev
    ports:
      - "${DYNAMODB_ADMIN_PORT}:${DYNAMODB_ADMIN_PORT}"
    environment:
      DYNAMO_ENDPOINT: "${DYNAMODB_ENDPOINT}"
      AWS_REGION: "${AWS_REGION}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
    depends_on:
      - dynamodb-local

  prometheus:
    image: prom/prometheus:v2.30.3
    container_name: prometheus
    env_file:
      - .env.dev
    environment:
      - PROMETHEUS_PORT=${PROMETHEUS_PORT}
    ports:
      - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    # healthcheck:
    #   test: [ "CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:${PROMETHEUS_PORT}" ]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "0.2"
    #       memory: 300M

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    env_file:
      - .env.dev
    environment:
      - NODE_EXPORTER_PORT=${NODE_EXPORTER_PORT}
    ports:
      - "${NODE_EXPORTER_PORT}:${NODE_EXPORTER_PORT}"
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
      - "--collector.loadavg"
      - "--collector.meminfo"
      - "--collector.cpu"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  grafana:
    image: grafana/grafana:8.2.2
    container_name: grafana
    env_file:
      - .env.dev
    environment:
      - NODE_EXPORTER_PORT=${NODE_EXPORTER_PORT}
      - NODE_PORT=${NODE_PORT}
    ports:
      - "${GRAFANA_PORT}:${NODE_PORT}"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    # healthcheck:
    #   test: [ "CMD", "curl", "-f", "http://localhost:${GRAFANA_PORT}" ]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "0.2"
    #       memory: 300M

volumes:
  postgres_data_dev:
  dynamodb_data:
  prometheus_data:
  grafana_data:
